{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"dcm2bids dcm2bids reorganises NIfTI files from dcm2niix into the Brain Imaging Data Structure (BIDS). Before using this software, learn more about BIDS: read the BIDS specifications and the paper some dataset examples Follow the guide Install pip install dcm2bids or pip install --user dcm2bids Dependencies dcm2niix to convert DICOM to NIfTI. You need to install it install instructions Recent release TL;DR Steps to get your data in BIDS : cd <YOUR_FUTURE_BIDS_FOLDER> dcm2bids_scaffold dcm2bids_helper -d <FOLDER_WITH_DICOMS_OF_A_TYPICAL_SESSION> Build your configuration file with the help of the content of tmp_dcm2bids/helper dcm2bids -d DICOM_DIR -p PARTICIPANT_ID -c CONFIG_FILE Run the bids-validator dcm2bids creates log files inside <YOUR_FUTURE_BIDS_FOLDER>/tmp_dcm2bids/log Similar projects Other tools to create BIDS datasets : heudiconv bidskit dac2bids","title":"Home"},{"location":"#dcm2bids","text":"dcm2bids reorganises NIfTI files from dcm2niix into the Brain Imaging Data Structure (BIDS). Before using this software, learn more about BIDS: read the BIDS specifications and the paper some dataset examples Follow the guide","title":"dcm2bids"},{"location":"#install","text":"pip install dcm2bids or pip install --user dcm2bids","title":"Install"},{"location":"#dependencies","text":"dcm2niix to convert DICOM to NIfTI. You need to install it install instructions Recent release","title":"Dependencies"},{"location":"#tldr","text":"Steps to get your data in BIDS : cd <YOUR_FUTURE_BIDS_FOLDER> dcm2bids_scaffold dcm2bids_helper -d <FOLDER_WITH_DICOMS_OF_A_TYPICAL_SESSION> Build your configuration file with the help of the content of tmp_dcm2bids/helper dcm2bids -d DICOM_DIR -p PARTICIPANT_ID -c CONFIG_FILE Run the bids-validator dcm2bids creates log files inside <YOUR_FUTURE_BIDS_FOLDER>/tmp_dcm2bids/log","title":"TL;DR"},{"location":"#similar-projects","text":"Other tools to create BIDS datasets : heudiconv bidskit dac2bids","title":"Similar projects"},{"location":"guide/","text":"Introduction dcm2bids converts one session at a time. A session is all the acquisitions between the entry and exit of the participant in the scanner. You need to build a configuration file of your study to let dcm2bids associates your acquisitions through BIDS sidecar. Every study is different and this step needs a little bit of work. The scanner parameters should not change too much for one study (several MRI sessions), so a few configuration files should work. BIDS sidecar 1 files are JSON files with meta informations about the acquisition. dcm2niix (DICOM to NIfTI converter used by dcm2bids) creates automatically one BIDS sidecar for each NIfTI file. dcm2bids configuration file uses also the JSON format. One example is provided in the example folder on the github repository. It is recommended to use an editor with syntax highlighting to build a correct JSON file. Here is an online one. Usage How to launch dcm2bids when you have build your configuration file ? First cd in your BIDS directory. dcm2bids -d DICOM_DIR -p PARTICIPANT_ID -c CONFIG_FILE If your participant have a session ID: dcm2bids -d DICOM_DIR -p PARTICIPANT_ID -s SESSION_ID -c CONFIG_FILE dcm2bids creates log files inside tmp_dcm2bids/log See dcm2bids -h for more informations Configuration file example { \"descriptions\": [ { \"dataType\": \"anat\", \"modalityLabel\": \"T2w\", \"criteria\": { \"SeriesDescription\": \"*T2*\", \"EchoTime\": 0.1 }, \"sidecarChanges\": { \"ProtocolName\": \"T2\" } }, { \"dataType\": \"func\", \"modalityLabel\": \"bold\", \"customLabels\": \"task-rest\", \"criteria\": { \"SidecarFilename\": \"006*\" \"ImageType\": [\"ORIG*\", \"PRIMARY\", \"M\", \"ND\", \"MOSAIC\"] } }, { \"dataType\": \"fmap\", \"modalityLabel\": \"fmap\", \"intendedFor\": 1, \"criteria\": { \"ProtocoleName\": \"*field_mapping*\" } } ] } The descriptions field is a list of descriptions, each describing some acquisition. In this example, the configuration describes three acquisitions, a T2 weighted, resting state fMRI and a fieldmap. Each description tells dcm2bids how to group a set of acquisitions and how to label them. In this config file, Dcm2Bids is being told to collect files containing { \"SeriesDescription\": \"AXIAL_T2_SPACE\", \"EchoTime\": 0.1 } in their sidecars 1 and label them as anat , T2w type images. criteria dcm2bids will try to match the sidecars 1 of dcm2niix to the descriptions of the configuration file. The values you enter inside the criteria dictionary are patterns that will be compared to the corresponding key of the sidecar. The pattern matching is shell-style. It's possible to use wildcard * , single character ? etc ... Please have a look at the GNU documentation to know more. For example, in the first description, the pattern *T2* will be compared to the value of SeriesDescription of a sidecar. AXIAL_T2_SPACE will be a match, AXIAL_T1 won't. dcm2bids has a SidecarFilename key, as in the second description, if you prefer to also match with the filename of the sidecar. You can enter several criteria. All criteria must match for a description to be linked to a sidecar. dataType It is a mandatory field. Here is a definition from bids v1.2.0 : Data type - a functional group of different types of data. In BIDS we define six data types: func (task based and resting state functional MRI), dwi (diffusion weighted imaging), fmap (field inhomogeneity mapping data such as field maps), anat (structural imaging such as T1, T2, etc.), meg (magnetoencephalography), beh (behavioral). modalityLabel It is a mandatory field. It describes the modality of the acquisition like T1w , T2w or dwi , bold . customLabels It is an optional field. For some acquisitions, you need to add information in the file name. For resting state fMRI, it is usally task-rest . To know more on how to set these fields, read the BIDS specifications . For a longer example of a Dcm2Bids config json, see here . sidecarChanges Optional field to change or add information in a sidecar. intendedFor Optional field to add an IntendedFor entry in the sidecar of a fieldmap. Just put the index or a list of index of the description(s) that's intended for. Python index begins at 0 so in the example, 1 means it is intended for task-rest_bold . 1 : sidecars {: .no_toc } For each acquisition, dcm2niix creates an associated .json file, containing information from the dicom header. These are known as sidecars . These are the sidecars dcm2bids uses to filter the groups of acquisitions. To define this filtering you will probably need to review these sidecars. You can generate all the sidecars for an individual participant using dcm2bids_helper . Advanced configuration These optional configurations could be insert in the configuration file at the same level as the \"descriptions\" entry. { \"searchMethod\": \"fnmatch\", \"defaceTpl\": \"pydeface --outfile {dstFile} {srcFile}\", \"description\": [ ... ] } searchMethod default: \"searchMethod\": \"fnmatch\" fnmatch is the behaviour (See criteria) by default and the fall back if this option is set incorrectly. re is the other choice if you want more flexibility to match criteria. defaceTpl default: \"defaceTpl\": None The anonymizer option no longer exists from v2.0.0 . It is still possible to deface the anatomical nifti images. For example, if you use the last version of pydeface, add: \"defaceTpl\": \"pydeface --outfile {dstFile} {srcFile}\" It is a template string and dcm2bids will replace {srcFile} and {dstFile} by the source file (input) and the destination file (output). dcm2niixOptions default: \"dcm2niixOptions\": \"-b y -ba y -z y -f '%3s_%f_%p_%t'\" Arguments for dcm2niix compKeys default: \"compKeys\": [\"SeriesNumber\", \"AcquisitionTime\", \"SidecarFilename\"] Acquisitions are sorted using the sidecar data. The default behaviour is to sort by SeriesNumber then by AcquisitionTime then by the SidecarFilename . You can change this behaviour setting this key inside the configuration file. Output dcm2bids creates a sub-<PARTICIPANT_ID> directory in the output directory (by default the folder where the script is launched). Sidecars with one matching description will be convert to BIDS. If a file already exists, dcm2bids won't overwrite it. You should use the --clobber option to overwrite files. If a description matches several sidecars, dcm2bids will add automatically the custom label run- to the filename. Sidecars with no or more than one matching descriptions are kept in tmp_dcm2bids directory. Users can review these mismatches to change the configuration file accordingly. Tools Helper dcm2bids_helper -d DICOM_DIR [-o OUTPUT_DIR] To build the configuration file, you need to have a example of the sidecars. You can use dcm2bids_helper with the DICOMs of one participant. It will launch dcm2niix and save the result inside the tmp_dcm2bids/helper of the output directory. Scaffold dcm2bids_scaffold [-o OUTPUT_DIR] Create basic BIDS files and directories in the output directory (by default folder where the script is launched). bids-validator Run the bids-validator to check your directory. Don't forget to create a .bidsignore file at the root of your BIDS directory with tmp_dcm2bids/* inside.","title":"Guide"},{"location":"guide/#introduction","text":"dcm2bids converts one session at a time. A session is all the acquisitions between the entry and exit of the participant in the scanner. You need to build a configuration file of your study to let dcm2bids associates your acquisitions through BIDS sidecar. Every study is different and this step needs a little bit of work. The scanner parameters should not change too much for one study (several MRI sessions), so a few configuration files should work. BIDS sidecar 1 files are JSON files with meta informations about the acquisition. dcm2niix (DICOM to NIfTI converter used by dcm2bids) creates automatically one BIDS sidecar for each NIfTI file. dcm2bids configuration file uses also the JSON format. One example is provided in the example folder on the github repository. It is recommended to use an editor with syntax highlighting to build a correct JSON file. Here is an online one.","title":"Introduction"},{"location":"guide/#usage","text":"How to launch dcm2bids when you have build your configuration file ? First cd in your BIDS directory. dcm2bids -d DICOM_DIR -p PARTICIPANT_ID -c CONFIG_FILE If your participant have a session ID: dcm2bids -d DICOM_DIR -p PARTICIPANT_ID -s SESSION_ID -c CONFIG_FILE dcm2bids creates log files inside tmp_dcm2bids/log See dcm2bids -h for more informations","title":"Usage"},{"location":"guide/#configuration-file-example","text":"{ \"descriptions\": [ { \"dataType\": \"anat\", \"modalityLabel\": \"T2w\", \"criteria\": { \"SeriesDescription\": \"*T2*\", \"EchoTime\": 0.1 }, \"sidecarChanges\": { \"ProtocolName\": \"T2\" } }, { \"dataType\": \"func\", \"modalityLabel\": \"bold\", \"customLabels\": \"task-rest\", \"criteria\": { \"SidecarFilename\": \"006*\" \"ImageType\": [\"ORIG*\", \"PRIMARY\", \"M\", \"ND\", \"MOSAIC\"] } }, { \"dataType\": \"fmap\", \"modalityLabel\": \"fmap\", \"intendedFor\": 1, \"criteria\": { \"ProtocoleName\": \"*field_mapping*\" } } ] } The descriptions field is a list of descriptions, each describing some acquisition. In this example, the configuration describes three acquisitions, a T2 weighted, resting state fMRI and a fieldmap. Each description tells dcm2bids how to group a set of acquisitions and how to label them. In this config file, Dcm2Bids is being told to collect files containing { \"SeriesDescription\": \"AXIAL_T2_SPACE\", \"EchoTime\": 0.1 } in their sidecars 1 and label them as anat , T2w type images.","title":"Configuration file example"},{"location":"guide/#criteria","text":"dcm2bids will try to match the sidecars 1 of dcm2niix to the descriptions of the configuration file. The values you enter inside the criteria dictionary are patterns that will be compared to the corresponding key of the sidecar. The pattern matching is shell-style. It's possible to use wildcard * , single character ? etc ... Please have a look at the GNU documentation to know more. For example, in the first description, the pattern *T2* will be compared to the value of SeriesDescription of a sidecar. AXIAL_T2_SPACE will be a match, AXIAL_T1 won't. dcm2bids has a SidecarFilename key, as in the second description, if you prefer to also match with the filename of the sidecar. You can enter several criteria. All criteria must match for a description to be linked to a sidecar.","title":"criteria"},{"location":"guide/#datatype","text":"It is a mandatory field. Here is a definition from bids v1.2.0 : Data type - a functional group of different types of data. In BIDS we define six data types: func (task based and resting state functional MRI), dwi (diffusion weighted imaging), fmap (field inhomogeneity mapping data such as field maps), anat (structural imaging such as T1, T2, etc.), meg (magnetoencephalography), beh (behavioral).","title":"dataType"},{"location":"guide/#modalitylabel","text":"It is a mandatory field. It describes the modality of the acquisition like T1w , T2w or dwi , bold .","title":"modalityLabel"},{"location":"guide/#customlabels","text":"It is an optional field. For some acquisitions, you need to add information in the file name. For resting state fMRI, it is usally task-rest . To know more on how to set these fields, read the BIDS specifications . For a longer example of a Dcm2Bids config json, see here .","title":"customLabels"},{"location":"guide/#sidecarchanges","text":"Optional field to change or add information in a sidecar.","title":"sidecarChanges"},{"location":"guide/#intendedfor","text":"Optional field to add an IntendedFor entry in the sidecar of a fieldmap. Just put the index or a list of index of the description(s) that's intended for. Python index begins at 0 so in the example, 1 means it is intended for task-rest_bold .","title":"intendedFor"},{"location":"guide/#1-sidecars","text":"{: .no_toc } For each acquisition, dcm2niix creates an associated .json file, containing information from the dicom header. These are known as sidecars . These are the sidecars dcm2bids uses to filter the groups of acquisitions. To define this filtering you will probably need to review these sidecars. You can generate all the sidecars for an individual participant using dcm2bids_helper .","title":"1: sidecars"},{"location":"guide/#advanced-configuration","text":"These optional configurations could be insert in the configuration file at the same level as the \"descriptions\" entry. { \"searchMethod\": \"fnmatch\", \"defaceTpl\": \"pydeface --outfile {dstFile} {srcFile}\", \"description\": [ ... ] }","title":"Advanced configuration"},{"location":"guide/#searchmethod","text":"default: \"searchMethod\": \"fnmatch\" fnmatch is the behaviour (See criteria) by default and the fall back if this option is set incorrectly. re is the other choice if you want more flexibility to match criteria.","title":"searchMethod"},{"location":"guide/#defacetpl","text":"default: \"defaceTpl\": None The anonymizer option no longer exists from v2.0.0 . It is still possible to deface the anatomical nifti images. For example, if you use the last version of pydeface, add: \"defaceTpl\": \"pydeface --outfile {dstFile} {srcFile}\" It is a template string and dcm2bids will replace {srcFile} and {dstFile} by the source file (input) and the destination file (output).","title":"defaceTpl"},{"location":"guide/#dcm2niixoptions","text":"default: \"dcm2niixOptions\": \"-b y -ba y -z y -f '%3s_%f_%p_%t'\" Arguments for dcm2niix","title":"dcm2niixOptions"},{"location":"guide/#compkeys","text":"default: \"compKeys\": [\"SeriesNumber\", \"AcquisitionTime\", \"SidecarFilename\"] Acquisitions are sorted using the sidecar data. The default behaviour is to sort by SeriesNumber then by AcquisitionTime then by the SidecarFilename . You can change this behaviour setting this key inside the configuration file.","title":"compKeys"},{"location":"guide/#output","text":"dcm2bids creates a sub-<PARTICIPANT_ID> directory in the output directory (by default the folder where the script is launched). Sidecars with one matching description will be convert to BIDS. If a file already exists, dcm2bids won't overwrite it. You should use the --clobber option to overwrite files. If a description matches several sidecars, dcm2bids will add automatically the custom label run- to the filename. Sidecars with no or more than one matching descriptions are kept in tmp_dcm2bids directory. Users can review these mismatches to change the configuration file accordingly.","title":"Output"},{"location":"guide/#tools","text":"","title":"Tools"},{"location":"guide/#helper","text":"dcm2bids_helper -d DICOM_DIR [-o OUTPUT_DIR] To build the configuration file, you need to have a example of the sidecars. You can use dcm2bids_helper with the DICOMs of one participant. It will launch dcm2niix and save the result inside the tmp_dcm2bids/helper of the output directory.","title":"Helper"},{"location":"guide/#scaffold","text":"dcm2bids_scaffold [-o OUTPUT_DIR] Create basic BIDS files and directories in the output directory (by default folder where the script is launched).","title":"Scaffold"},{"location":"guide/#bids-validator","text":"Run the bids-validator to check your directory. Don't forget to create a .bidsignore file at the root of your BIDS directory with tmp_dcm2bids/* inside.","title":"bids-validator"},{"location":"tpl/","text":"Title Sub-title Link inside documentation here A question with the answer hidden Question ? Answer Click to see answers Link to an image in the assets folder [![name](assets/images/name.jpg)](assets/images/name.jpg) Back to Home","title":"Yout title here"},{"location":"tpl/#title","text":"","title":"Title"},{"location":"tpl/#sub-title","text":"Link inside documentation here A question with the answer hidden Question ? Answer Click to see answers Link to an image in the assets folder [![name](assets/images/name.jpg)](assets/images/name.jpg) Back to Home","title":"Sub-title"}]}