{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"1-usage/","text":"Usage Introduction dcm2bids converts one session at a time. A session is all the acquisitions between the entry and exit of the participant in the scanner. You need to build a configuration file of your study to let dcm2bids associates your acquisitions through BIDS sidecar. Every study is different and this step needs a little bit of work. The scanner parameters should not change too much for one study (several MRI sessions), so a few configuration files should work. BIDS sidecar 1 files are JSON files with meta informations about the acquisition. dcm2niix (DICOM to NIfTI converter used by dcm2bids) creates automatically one BIDS sidecar for each NIfTI file. dcm2bids configuration file uses also the JSON format. One example is provided in the example folder on the github repository. It is recommended to use an editor with syntax highlighting to build a correct JSON file. Here is an online one. CLI How to launch dcm2bids when you have build your configuration file ? First cd in your BIDS directory. dcm2bids -d DICOM_DIR -p PARTICIPANT_ID -c CONFIG_FILE If your participant have a session ID: dcm2bids -d DICOM_DIR -p PARTICIPANT_ID -s SESSION_ID -c CONFIG_FILE dcm2bids creates log files inside tmp_dcm2bids/log See dcm2bids -h for more informations Output dcm2bids creates a sub-<PARTICIPANT_ID> directory in the output directory (by default the folder where the script is launched). Sidecars with one matching description will be convert to BIDS. If a file already exists, dcm2bids won't overwrite it. You should use the --clobber option to overwrite files. If a description matches several sidecars, dcm2bids will add automatically the custom label run- to the filename. Sidecars with no or more than one matching descriptions are kept in tmp_dcm2bids directory. Users can review these mismatches to change the configuration file accordingly. Tools Helper dcm2bids_helper -d DICOM_DIR [-o OUTPUT_DIR] To build the configuration file, you need to have a example of the sidecars. You can use dcm2bids_helper with the DICOMs of one participant. It will launch dcm2niix and save the result inside the tmp_dcm2bids/helper of the output directory. Scaffold dcm2bids_scaffold [-o OUTPUT_DIR] Create basic BIDS files and directories in the output directory (by default folder where the script is launched). Containers You can also use all the tools through docker or singularity images. Docker Download the latest release of the Docker container for dcm2bids: docker pull unfmontreal/dcm2bids:latest Singularity Build the latest singularity image: singularity build dcm2bids.sif containers/singularity.def","title":"Usage"},{"location":"1-usage/#usage","text":"","title":"Usage"},{"location":"1-usage/#introduction","text":"dcm2bids converts one session at a time. A session is all the acquisitions between the entry and exit of the participant in the scanner. You need to build a configuration file of your study to let dcm2bids associates your acquisitions through BIDS sidecar. Every study is different and this step needs a little bit of work. The scanner parameters should not change too much for one study (several MRI sessions), so a few configuration files should work. BIDS sidecar 1 files are JSON files with meta informations about the acquisition. dcm2niix (DICOM to NIfTI converter used by dcm2bids) creates automatically one BIDS sidecar for each NIfTI file. dcm2bids configuration file uses also the JSON format. One example is provided in the example folder on the github repository. It is recommended to use an editor with syntax highlighting to build a correct JSON file. Here is an online one.","title":"Introduction"},{"location":"1-usage/#cli","text":"How to launch dcm2bids when you have build your configuration file ? First cd in your BIDS directory. dcm2bids -d DICOM_DIR -p PARTICIPANT_ID -c CONFIG_FILE If your participant have a session ID: dcm2bids -d DICOM_DIR -p PARTICIPANT_ID -s SESSION_ID -c CONFIG_FILE dcm2bids creates log files inside tmp_dcm2bids/log See dcm2bids -h for more informations","title":"CLI"},{"location":"1-usage/#output","text":"dcm2bids creates a sub-<PARTICIPANT_ID> directory in the output directory (by default the folder where the script is launched). Sidecars with one matching description will be convert to BIDS. If a file already exists, dcm2bids won't overwrite it. You should use the --clobber option to overwrite files. If a description matches several sidecars, dcm2bids will add automatically the custom label run- to the filename. Sidecars with no or more than one matching descriptions are kept in tmp_dcm2bids directory. Users can review these mismatches to change the configuration file accordingly.","title":"Output"},{"location":"1-usage/#tools","text":"Helper dcm2bids_helper -d DICOM_DIR [-o OUTPUT_DIR] To build the configuration file, you need to have a example of the sidecars. You can use dcm2bids_helper with the DICOMs of one participant. It will launch dcm2niix and save the result inside the tmp_dcm2bids/helper of the output directory. Scaffold dcm2bids_scaffold [-o OUTPUT_DIR] Create basic BIDS files and directories in the output directory (by default folder where the script is launched).","title":"Tools"},{"location":"1-usage/#containers","text":"You can also use all the tools through docker or singularity images.","title":"Containers"},{"location":"1-usage/#docker","text":"Download the latest release of the Docker container for dcm2bids: docker pull unfmontreal/dcm2bids:latest","title":"Docker"},{"location":"1-usage/#singularity","text":"Build the latest singularity image: singularity build dcm2bids.sif containers/singularity.def","title":"Singularity"},{"location":"2-tutorial/","text":"Tutorial Setup Create a new folder for this tutorial. mkdir dcm2bids-tutorial cd dcm2bids-tutorial You can skip this part and go to the next section if dcm2niix and dcm2bids are already installed. The tutorial suppose that conda is installed and correctly setup on your computer. It is the easiest way to install dcm2bids and its dependencies on any OS. You should know that this is not the best way because conda does not always have the last version of dcm2niix. Create a new file environment.yml with your favorite text editor with this content: name: dcm2bids channels: - conda-forge dependencies: - dcm2niix - pip Finaly, create a new conda environment to install dcm2bids: conda env create -f environment.yml source activate dcm2bids pip install dcm2bids We should have access to dcm2bids now. Test it with dcm2bids --help . Scaffolding We can now run the command dcm2bids_scaffold . This gives us several generics folders and files. We can have a look at these files and consult the BIDS specification for more information. One of the created folders is named sourcedata , this is the folder to put your DICOMs Downloading test data For this tutorial, we will use DICOMs from neurolabusc on github. Go to : https://github.com/neurolabusc/dcm_qa_nih and click on the Clone or download button to download as ZIP. Move the zip file to the sourcedata folder and unzip it. Here is how to do it in the terminal but we could do it the way we want. mv ~/Downloads/dcm_qa_nih-master.zip sourcedata/ cd sourcedata unzip dcm_qa_nih-master.zip cd .. We should have now a dcm_qa_nih-master folder inside sourcedata. DICOM to NIfTI conversion dcm2bids_helper -d sourcedata/dcm_qa_nih-master/In/ This command will convert the DICOMs files to NIfTI files and save them inside tmp_dcm2bids/helper/ . We should see a list of compressed NIfTI files ( nii.gz ) with their resective sidecar files ( .json ). For this tutorial, we will only be interested in three acquisitions : 004_In_Axial_EPI-FMRI_(Interleaved_I_to_S)_20180918114023.nii.gz 004_In_EPI_PE=PA_20180918121230.nii.gz 003_In_EPI_PE=AP_20180918121230.nii.gz The first will be our resting state fMRI, the second and third our fieldmap EPI. When you will do it with your DICOMs, you should do it with a typical session of one of your participant. Building the configuration file Now we will create a configuration file called dcm2bids_config.json (this is just an example, it could be whatever we want) in the code/ folder. Use any text editor to create the file with the contents: { \"descriptions\": [] } For example, with our resting state fMRI we see in its sidecar that the field \"SeriesDescription\" is equal to \"Axial_EPI-FMRI_(Interleaved_I_to_S)\" . We can open 004_In_Axial_EPI-FMRI_(Interleaved_I_to_S)_20180918114023.json to verify that. This value could be match with a pattern \"Axial_EPI-FMRI*\" . Unfortunately, this criteria is not enough and could match other files. See 006_In_Axial_EPI-FMRI_(Interleaved_S_to_I)_20180918114023.json . In this case we could add another criteria to match the acquisition by the filename of the sidecar with the pattern \"*Interleaved_I_to_S*\" . With all this information we could then update our configuration file. { \"descriptions\": [ { \"dataType\": \"func\", \"modalityLabel\": \"bold\", \"customLabels\": \"task-rest\", \"criteria\": { \"SeriesDescription\": \"Axial_EPI-FMRI*\", \"SidecarFilename\": \"*Interleaved_I_to_S*\" } } ] } For the two fieldmaps, we can see that with patterns of \"*EPI_PE=AP*\" or \"*EPI_PE=PA*\" on the filename is enough to match the correct acquisition. We could then update our configuration file. { \"descriptions\": [ { \"dataType\": \"func\", \"modalityLabel\": \"bold\", \"customLabels\": \"task-rest\", \"criteria\": { \"SeriesDescription\": \"Axial_EPI-FMRI*\", \"SidecarFilename\": \"*Interleaved_I_to_S*\" } }, { \"dataType\": \"fmap\", \"modalityLabel\": \"epi\", \"customLabels\": \"dir-AP\", \"criteria\": { \"SidecarFilename\": \"*EPI_PE=AP*\" }, \"intendedFor\": 0 }, { \"dataType\": \"fmap\", \"modalityLabel\": \"epi\", \"customLabels\": \"dir-PA\", \"criteria\": { \"SidecarFilename\": \"*EPI_PE=PA*\" }, \"intendedFor\": 0 } ] } For fieldmap, we added an \"intendedFor\" field to show that these fieldmaps should be use with our fMRI acquisition. Have a look at the explanation of intendedFor in the documentation or in the BIDS specification . Running dcm2bids We can now run dcm2bids: dcm2bids -d sourcedata/dcm_qa_nih-master/In/ -p ID01 -c code/dcm2bids_config.json A bunch of information is print to the terminal and we can verify that the data are now in BIDS. $ ls sub-ID01/* sub-ID01/fmap: sub-ID01_dir-AP_epi.json sub-ID01_dir-AP_epi.nii.gz sub-ID01_dir-PA_epi.json sub-ID01_dir-PA_epi.nii.gz sub-ID01/func: sub-ID01_task-rest_bold.json sub-ID01_task-rest_bold.nii.gz Files that were not grabbed stay in a temporary folder tmp_dcm2bids/sub-{participant_id} . In our case : tmp_dcm2bids/sub-ID01 . Have a look at dcm2bids --help or the other pages of the documentation for more information.","title":"Tutorial"},{"location":"2-tutorial/#tutorial","text":"","title":"Tutorial"},{"location":"2-tutorial/#setup","text":"Create a new folder for this tutorial. mkdir dcm2bids-tutorial cd dcm2bids-tutorial You can skip this part and go to the next section if dcm2niix and dcm2bids are already installed. The tutorial suppose that conda is installed and correctly setup on your computer. It is the easiest way to install dcm2bids and its dependencies on any OS. You should know that this is not the best way because conda does not always have the last version of dcm2niix. Create a new file environment.yml with your favorite text editor with this content: name: dcm2bids channels: - conda-forge dependencies: - dcm2niix - pip Finaly, create a new conda environment to install dcm2bids: conda env create -f environment.yml source activate dcm2bids pip install dcm2bids We should have access to dcm2bids now. Test it with dcm2bids --help .","title":"Setup"},{"location":"2-tutorial/#scaffolding","text":"We can now run the command dcm2bids_scaffold . This gives us several generics folders and files. We can have a look at these files and consult the BIDS specification for more information. One of the created folders is named sourcedata , this is the folder to put your DICOMs","title":"Scaffolding"},{"location":"2-tutorial/#downloading-test-data","text":"For this tutorial, we will use DICOMs from neurolabusc on github. Go to : https://github.com/neurolabusc/dcm_qa_nih and click on the Clone or download button to download as ZIP. Move the zip file to the sourcedata folder and unzip it. Here is how to do it in the terminal but we could do it the way we want. mv ~/Downloads/dcm_qa_nih-master.zip sourcedata/ cd sourcedata unzip dcm_qa_nih-master.zip cd .. We should have now a dcm_qa_nih-master folder inside sourcedata.","title":"Downloading test data"},{"location":"2-tutorial/#dicom-to-nifti-conversion","text":"dcm2bids_helper -d sourcedata/dcm_qa_nih-master/In/ This command will convert the DICOMs files to NIfTI files and save them inside tmp_dcm2bids/helper/ . We should see a list of compressed NIfTI files ( nii.gz ) with their resective sidecar files ( .json ). For this tutorial, we will only be interested in three acquisitions : 004_In_Axial_EPI-FMRI_(Interleaved_I_to_S)_20180918114023.nii.gz 004_In_EPI_PE=PA_20180918121230.nii.gz 003_In_EPI_PE=AP_20180918121230.nii.gz The first will be our resting state fMRI, the second and third our fieldmap EPI. When you will do it with your DICOMs, you should do it with a typical session of one of your participant.","title":"DICOM to NIfTI conversion"},{"location":"2-tutorial/#building-the-configuration-file","text":"Now we will create a configuration file called dcm2bids_config.json (this is just an example, it could be whatever we want) in the code/ folder. Use any text editor to create the file with the contents: { \"descriptions\": [] } For example, with our resting state fMRI we see in its sidecar that the field \"SeriesDescription\" is equal to \"Axial_EPI-FMRI_(Interleaved_I_to_S)\" . We can open 004_In_Axial_EPI-FMRI_(Interleaved_I_to_S)_20180918114023.json to verify that. This value could be match with a pattern \"Axial_EPI-FMRI*\" . Unfortunately, this criteria is not enough and could match other files. See 006_In_Axial_EPI-FMRI_(Interleaved_S_to_I)_20180918114023.json . In this case we could add another criteria to match the acquisition by the filename of the sidecar with the pattern \"*Interleaved_I_to_S*\" . With all this information we could then update our configuration file. { \"descriptions\": [ { \"dataType\": \"func\", \"modalityLabel\": \"bold\", \"customLabels\": \"task-rest\", \"criteria\": { \"SeriesDescription\": \"Axial_EPI-FMRI*\", \"SidecarFilename\": \"*Interleaved_I_to_S*\" } } ] } For the two fieldmaps, we can see that with patterns of \"*EPI_PE=AP*\" or \"*EPI_PE=PA*\" on the filename is enough to match the correct acquisition. We could then update our configuration file. { \"descriptions\": [ { \"dataType\": \"func\", \"modalityLabel\": \"bold\", \"customLabels\": \"task-rest\", \"criteria\": { \"SeriesDescription\": \"Axial_EPI-FMRI*\", \"SidecarFilename\": \"*Interleaved_I_to_S*\" } }, { \"dataType\": \"fmap\", \"modalityLabel\": \"epi\", \"customLabels\": \"dir-AP\", \"criteria\": { \"SidecarFilename\": \"*EPI_PE=AP*\" }, \"intendedFor\": 0 }, { \"dataType\": \"fmap\", \"modalityLabel\": \"epi\", \"customLabels\": \"dir-PA\", \"criteria\": { \"SidecarFilename\": \"*EPI_PE=PA*\" }, \"intendedFor\": 0 } ] } For fieldmap, we added an \"intendedFor\" field to show that these fieldmaps should be use with our fMRI acquisition. Have a look at the explanation of intendedFor in the documentation or in the BIDS specification .","title":"Building the configuration file"},{"location":"2-tutorial/#running-dcm2bids","text":"We can now run dcm2bids: dcm2bids -d sourcedata/dcm_qa_nih-master/In/ -p ID01 -c code/dcm2bids_config.json A bunch of information is print to the terminal and we can verify that the data are now in BIDS. $ ls sub-ID01/* sub-ID01/fmap: sub-ID01_dir-AP_epi.json sub-ID01_dir-AP_epi.nii.gz sub-ID01_dir-PA_epi.json sub-ID01_dir-PA_epi.nii.gz sub-ID01/func: sub-ID01_task-rest_bold.json sub-ID01_task-rest_bold.nii.gz Files that were not grabbed stay in a temporary folder tmp_dcm2bids/sub-{participant_id} . In our case : tmp_dcm2bids/sub-ID01 . Have a look at dcm2bids --help or the other pages of the documentation for more information.","title":"Running dcm2bids"},{"location":"3-configuration/","text":"Configuration file Configuration file example { \"descriptions\": [ { \"dataType\": \"func\", \"modalityLabel\": \"bold\", \"customLabels\": \"task-rest\", \"criteria\": { \"SidecarFilename\": \"006*\", \"ImageType\": [\"ORIG*\", \"PRIMARY\", \"M\", \"ND\", \"MOSAIC\"] } }, { \"dataType\": \"anat\", \"modalityLabel\": \"T2w\", \"criteria\": { \"SeriesDescription\": \"*T2*\", \"EchoTime\": 0.1 }, \"sidecarChanges\": { \"ProtocolName\": \"T2\" } }, { \"dataType\": \"fmap\", \"modalityLabel\": \"fmap\", \"intendedFor\": 0, \"criteria\": { \"ProtocoleName\": \"*field_mapping*\" } } ] } The descriptions field is a list of descriptions, each describing some acquisition. In this example, the configuration describes three acquisitions, a T2 weighted, resting state fMRI and a fieldmap. Each description tells dcm2bids how to group a set of acquisitions and how to label them. In this config file, Dcm2Bids is being told to collect files containing { \"SeriesDescription\": \"AXIAL_T2_SPACE\", \"EchoTime\": 0.1 } in their sidecars 1 and label them as anat , T2w type images. criteria dcm2bids will try to match the sidecars 1 of dcm2niix to the descriptions of the configuration file. The values you enter inside the criteria dictionary are patterns that will be compared to the corresponding key of the sidecar. The pattern matching is shell-style. It's possible to use wildcard * , single character ? etc ... Please have a look at the GNU documentation to know more. For example, in the second description, the pattern *T2* will be compared to the value of SeriesDescription of a sidecar. AXIAL_T2_SPACE will be a match, AXIAL_T1 won't. dcm2bids has a SidecarFilename key, as in the first description, if you prefer to also match with the filename of the sidecar. You can enter several criteria. All criteria must match for a description to be linked to a sidecar. dataType It is a mandatory field. Here is a definition from bids v1.2.0 : Data type - a functional group of different types of data. In BIDS we define six data types: func (task based and resting state functional MRI), dwi (diffusion weighted imaging), fmap (field inhomogeneity mapping data such as field maps), anat (structural imaging such as T1, T2, etc.), meg (magnetoencephalography), beh (behavioral). modalityLabel It is a mandatory field. It describes the modality of the acquisition like T1w , T2w or dwi , bold . customLabels It is an optional field. For some acquisitions, you need to add information in the file name. For resting state fMRI, it is usally task-rest . To know more on how to set these fields, read the BIDS specifications . For a longer example of a Dcm2Bids config json, see here . sidecarChanges Optional field to change or add information in a sidecar. intendedFor Optional field to add an IntendedFor entry in the sidecar of a fieldmap. Just put the index or a list of index of the description(s) that's intended for. Python index begins at 0 so in the example, 0 means it is intended for task-rest_bold . 1 : sidecars For each acquisition, dcm2niix creates an associated .json file, containing information from the dicom header. These are known as sidecars . These are the sidecars dcm2bids uses to filter the groups of acquisitions. To define this filtering you will probably need to review these sidecars. You can generate all the sidecars for an individual participant using dcm2bids_helper .","title":"Configuration file"},{"location":"3-configuration/#configuration-file","text":"","title":"Configuration file"},{"location":"3-configuration/#configuration-file-example","text":"{ \"descriptions\": [ { \"dataType\": \"func\", \"modalityLabel\": \"bold\", \"customLabels\": \"task-rest\", \"criteria\": { \"SidecarFilename\": \"006*\", \"ImageType\": [\"ORIG*\", \"PRIMARY\", \"M\", \"ND\", \"MOSAIC\"] } }, { \"dataType\": \"anat\", \"modalityLabel\": \"T2w\", \"criteria\": { \"SeriesDescription\": \"*T2*\", \"EchoTime\": 0.1 }, \"sidecarChanges\": { \"ProtocolName\": \"T2\" } }, { \"dataType\": \"fmap\", \"modalityLabel\": \"fmap\", \"intendedFor\": 0, \"criteria\": { \"ProtocoleName\": \"*field_mapping*\" } } ] } The descriptions field is a list of descriptions, each describing some acquisition. In this example, the configuration describes three acquisitions, a T2 weighted, resting state fMRI and a fieldmap. Each description tells dcm2bids how to group a set of acquisitions and how to label them. In this config file, Dcm2Bids is being told to collect files containing { \"SeriesDescription\": \"AXIAL_T2_SPACE\", \"EchoTime\": 0.1 } in their sidecars 1 and label them as anat , T2w type images.","title":"Configuration file example"},{"location":"3-configuration/#criteria","text":"dcm2bids will try to match the sidecars 1 of dcm2niix to the descriptions of the configuration file. The values you enter inside the criteria dictionary are patterns that will be compared to the corresponding key of the sidecar. The pattern matching is shell-style. It's possible to use wildcard * , single character ? etc ... Please have a look at the GNU documentation to know more. For example, in the second description, the pattern *T2* will be compared to the value of SeriesDescription of a sidecar. AXIAL_T2_SPACE will be a match, AXIAL_T1 won't. dcm2bids has a SidecarFilename key, as in the first description, if you prefer to also match with the filename of the sidecar. You can enter several criteria. All criteria must match for a description to be linked to a sidecar.","title":"criteria"},{"location":"3-configuration/#datatype","text":"It is a mandatory field. Here is a definition from bids v1.2.0 : Data type - a functional group of different types of data. In BIDS we define six data types: func (task based and resting state functional MRI), dwi (diffusion weighted imaging), fmap (field inhomogeneity mapping data such as field maps), anat (structural imaging such as T1, T2, etc.), meg (magnetoencephalography), beh (behavioral).","title":"dataType"},{"location":"3-configuration/#modalitylabel","text":"It is a mandatory field. It describes the modality of the acquisition like T1w , T2w or dwi , bold .","title":"modalityLabel"},{"location":"3-configuration/#customlabels","text":"It is an optional field. For some acquisitions, you need to add information in the file name. For resting state fMRI, it is usally task-rest . To know more on how to set these fields, read the BIDS specifications . For a longer example of a Dcm2Bids config json, see here .","title":"customLabels"},{"location":"3-configuration/#sidecarchanges","text":"Optional field to change or add information in a sidecar.","title":"sidecarChanges"},{"location":"3-configuration/#intendedfor","text":"Optional field to add an IntendedFor entry in the sidecar of a fieldmap. Just put the index or a list of index of the description(s) that's intended for. Python index begins at 0 so in the example, 0 means it is intended for task-rest_bold .","title":"intendedFor"},{"location":"3-configuration/#1-sidecars","text":"For each acquisition, dcm2niix creates an associated .json file, containing information from the dicom header. These are known as sidecars . These are the sidecars dcm2bids uses to filter the groups of acquisitions. To define this filtering you will probably need to review these sidecars. You can generate all the sidecars for an individual participant using dcm2bids_helper .","title":"1: sidecars"},{"location":"4-advance/","text":"Advanced configuration These optional configurations could be insert in the configuration file at the same level as the \"descriptions\" entry. { \"searchMethod\": \"fnmatch\", \"caseSensitive\": true, \"defaceTpl\": \"pydeface --outfile {dstFile} {srcFile}\", \"description\": [ ... ] } searchMethod default: \"searchMethod\": \"fnmatch\" fnmatch is the behaviour (See criteria) by default and the fall back if this option is set incorrectly. re is the other choice if you want more flexibility to match criteria. caseSensitive default: \"caseSensitive\": \"true\" If false, comparisons between strings/lists will be not case sensitive. It's only disabled when used with \"searchMethod\": \"fnmatch\" . defaceTpl default: \"defaceTpl\": None The anonymizer option no longer exists from v2.0.0 . It is still possible to deface the anatomical nifti images. For example, if you use the last version of pydeface, add: \"defaceTpl\": \"pydeface --outfile {dstFile} {srcFile}\" It is a template string and dcm2bids will replace {srcFile} and {dstFile} by the source file (input) and the destination file (output). dcm2niixOptions default: \"dcm2niixOptions\": \"-b y -ba y -z y -f '%3s_%f_%p_%t'\" Arguments for dcm2niix compKeys default: \"compKeys\": [\"SeriesNumber\", \"AcquisitionTime\", \"SidecarFilename\"] Acquisitions are sorted using the sidecar data. The default behaviour is to sort by SeriesNumber then by AcquisitionTime then by the SidecarFilename . You can change this behaviour setting this key inside the configuration file.","title":"Advanced configuration"},{"location":"4-advance/#advanced-configuration","text":"These optional configurations could be insert in the configuration file at the same level as the \"descriptions\" entry. { \"searchMethod\": \"fnmatch\", \"caseSensitive\": true, \"defaceTpl\": \"pydeface --outfile {dstFile} {srcFile}\", \"description\": [ ... ] }","title":"Advanced configuration"},{"location":"4-advance/#searchmethod","text":"default: \"searchMethod\": \"fnmatch\" fnmatch is the behaviour (See criteria) by default and the fall back if this option is set incorrectly. re is the other choice if you want more flexibility to match criteria.","title":"searchMethod"},{"location":"4-advance/#casesensitive","text":"default: \"caseSensitive\": \"true\" If false, comparisons between strings/lists will be not case sensitive. It's only disabled when used with \"searchMethod\": \"fnmatch\" .","title":"caseSensitive"},{"location":"4-advance/#defacetpl","text":"default: \"defaceTpl\": None The anonymizer option no longer exists from v2.0.0 . It is still possible to deface the anatomical nifti images. For example, if you use the last version of pydeface, add: \"defaceTpl\": \"pydeface --outfile {dstFile} {srcFile}\" It is a template string and dcm2bids will replace {srcFile} and {dstFile} by the source file (input) and the destination file (output).","title":"defaceTpl"},{"location":"4-advance/#dcm2niixoptions","text":"default: \"dcm2niixOptions\": \"-b y -ba y -z y -f '%3s_%f_%p_%t'\" Arguments for dcm2niix","title":"dcm2niixOptions"},{"location":"4-advance/#compkeys","text":"default: \"compKeys\": [\"SeriesNumber\", \"AcquisitionTime\", \"SidecarFilename\"] Acquisitions are sorted using the sidecar data. The default behaviour is to sort by SeriesNumber then by AcquisitionTime then by the SidecarFilename . You can change this behaviour setting this key inside the configuration file.","title":"compKeys"}]}